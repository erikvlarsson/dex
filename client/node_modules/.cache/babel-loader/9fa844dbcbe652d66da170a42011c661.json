{"ast":null,"code":"import Connection from \"./Connection\";\n\nclass CustomerService {\n  getNewCustomer() {\n    let customer = new Customer();\n    customer.id = Math.random().toString();\n    customer.name = \"Firstname Lastname\";\n    customer.type = \"person\";\n    customer.address = new Address();\n    customer.address.street = \"Engelbrektsgatan\";\n    customer.address.streetNo = \"6\";\n    customer.address.postCode = \"21133\";\n    customer.address.city = \"Malmö\";\n    customer.address.region = \"Skåne\";\n    customer.phone = new Contact();\n    customer.phone.type = \"phone\";\n    customer.phone.text = \"0000-000000\";\n    customer.email = new Contact();\n    customer.email.type = \"email\";\n    customer.email.text = \"firstname.lastname@example.com\";\n    return customer;\n  }\n\n  async getCustomer(customerId) {\n    const data = await service.get(`/customer/${customerId}`).then(response => {\n      return response.data;\n    });\n    return this.jsonToCustomer(data);\n  }\n\n  async registerCustomer(customer) {\n    await service.post(`/customer`, customer).then(response => {\n      alert(\"registerCustomer \" + response.data);\n    });\n  }\n\n  async editCustomer(customer) {\n    await service.put(`/customer`, customer).then(response => {\n      alert(\"editCustomer \" + response.data);\n    });\n  }\n\n  async deleteCustomer(customerId) {\n    await service.delete(`/customer/${customerId}`).then(response => {\n      alert(\"deleteCustomer \" + response.data);\n    });\n  }\n\n  async getCustomers() {\n    let customers = [];\n    const data = await service.get(\"/customer\").then(response => {\n      return response.data;\n    });\n    data.forEach(customer => {\n      customers.push(this.jsonToCustomer(customer));\n    });\n    return customers;\n  }\n\n  jsonToCustomer(customer) {\n    let c = new Customer();\n    c.id = customer.id;\n    c.name = customer.name;\n    c.type = customer.customerType;\n    c.phone = new Contact();\n    c.phone.type = \"phone\";\n    c.phone.text = customer.phoneNumber;\n    c.email = new Contact();\n    c.email.type = \"email\";\n    c.email.text = customer.email;\n    c.address = new Address();\n    c.address.id = customer.address.id;\n    c.address.street = customer.address.street;\n    c.address.streetNo = customer.address.streetNumber;\n    c.address.postCode = customer.address.postalCode;\n    c.address.city = customer.address.city;\n    c.address.region = customer.address.region;\n    return c;\n  }\n\n  customerToJson(customer) {\n    return {\n      name: customer.name,\n      customerType: customer.type,\n      registrationNumber: \"string\",\n      email: customer.email.text,\n      phoneNumber: customer.phone.text,\n      address: {\n        id: customer.address.id,\n        street: customer.address.street,\n        streetNumber: customer.address.streetNo,\n        postalCode: customer.address.postCode,\n        city: customer.address.city,\n        region: customer.address.region,\n        country: customer.address.country\n      }\n    };\n  }\n\n}\n\nexport default CustomerService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Backend/UserService.js"],"names":["Connection","CustomerService","getNewCustomer","customer","Customer","id","Math","random","toString","name","type","address","Address","street","streetNo","postCode","city","region","phone","Contact","text","email","getCustomer","customerId","data","service","get","then","response","jsonToCustomer","registerCustomer","post","alert","editCustomer","put","deleteCustomer","delete","getCustomers","customers","forEach","push","c","customerType","phoneNumber","streetNumber","postalCode","customerToJson","registrationNumber","country"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,eAAN,CAAsB;AACpBC,EAAAA,cAAc,GAAG;AACf,QAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AAEAD,IAAAA,QAAQ,CAACE,EAAT,GAAcC,IAAI,CAACC,MAAL,GAAcC,QAAd,EAAd;AACAL,IAAAA,QAAQ,CAACM,IAAT,GAAgB,oBAAhB;AACAN,IAAAA,QAAQ,CAACO,IAAT,GAAgB,QAAhB;AAEAP,IAAAA,QAAQ,CAACQ,OAAT,GAAmB,IAAIC,OAAJ,EAAnB;AACAT,IAAAA,QAAQ,CAACQ,OAAT,CAAiBE,MAAjB,GAA0B,kBAA1B;AACAV,IAAAA,QAAQ,CAACQ,OAAT,CAAiBG,QAAjB,GAA4B,GAA5B;AACAX,IAAAA,QAAQ,CAACQ,OAAT,CAAiBI,QAAjB,GAA4B,OAA5B;AACAZ,IAAAA,QAAQ,CAACQ,OAAT,CAAiBK,IAAjB,GAAwB,OAAxB;AACAb,IAAAA,QAAQ,CAACQ,OAAT,CAAiBM,MAAjB,GAA0B,OAA1B;AAEAd,IAAAA,QAAQ,CAACe,KAAT,GAAiB,IAAIC,OAAJ,EAAjB;AACAhB,IAAAA,QAAQ,CAACe,KAAT,CAAeR,IAAf,GAAsB,OAAtB;AACAP,IAAAA,QAAQ,CAACe,KAAT,CAAeE,IAAf,GAAsB,aAAtB;AAEAjB,IAAAA,QAAQ,CAACkB,KAAT,GAAiB,IAAIF,OAAJ,EAAjB;AACAhB,IAAAA,QAAQ,CAACkB,KAAT,CAAeX,IAAf,GAAsB,OAAtB;AACAP,IAAAA,QAAQ,CAACkB,KAAT,CAAeD,IAAf,GAAsB,gCAAtB;AAEA,WAAOjB,QAAP;AACD;;AAED,QAAMmB,WAAN,CAAkBC,UAAlB,EAA8B;AAC5B,UAAMC,IAAI,GAAG,MAAMC,OAAO,CACvBC,GADgB,CACX,aAAYH,UAAW,EADZ,EAEhBI,IAFgB,CAEVC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACJ,IAAhB;AACD,KAJgB,CAAnB;AAKA,WAAO,KAAKK,cAAL,CAAoBL,IAApB,CAAP;AACD;;AAED,QAAMM,gBAAN,CAAuB3B,QAAvB,EAAiC;AAC/B,UAAMsB,OAAO,CAACM,IAAR,CAAc,WAAd,EAA0B5B,QAA1B,EAAoCwB,IAApC,CAA0CC,QAAD,IAAc;AAC3DI,MAAAA,KAAK,CAAC,sBAAsBJ,QAAQ,CAACJ,IAAhC,CAAL;AACD,KAFK,CAAN;AAGD;;AAED,QAAMS,YAAN,CAAmB9B,QAAnB,EAA6B;AAC3B,UAAMsB,OAAO,CAACS,GAAR,CAAa,WAAb,EAAyB/B,QAAzB,EAAmCwB,IAAnC,CAAyCC,QAAD,IAAc;AAC1DI,MAAAA,KAAK,CAAC,kBAAkBJ,QAAQ,CAACJ,IAA5B,CAAL;AACD,KAFK,CAAN;AAGD;;AAED,QAAMW,cAAN,CAAqBZ,UAArB,EAAiC;AAC/B,UAAME,OAAO,CAACW,MAAR,CAAgB,aAAYb,UAAW,EAAvC,EAA0CI,IAA1C,CAAgDC,QAAD,IAAc;AACjEI,MAAAA,KAAK,CAAC,oBAAoBJ,QAAQ,CAACJ,IAA9B,CAAL;AACD,KAFK,CAAN;AAGD;;AAED,QAAMa,YAAN,GAAqB;AACnB,QAAIC,SAAS,GAAG,EAAhB;AACA,UAAMd,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,IAAzB,CAA+BC,QAAD,IAAc;AAC7D,aAAOA,QAAQ,CAACJ,IAAhB;AACD,KAFkB,CAAnB;AAGAA,IAAAA,IAAI,CAACe,OAAL,CAAcpC,QAAD,IAAc;AACzBmC,MAAAA,SAAS,CAACE,IAAV,CAAe,KAAKX,cAAL,CAAoB1B,QAApB,CAAf;AACD,KAFD;AAGA,WAAOmC,SAAP;AACD;;AAEDT,EAAAA,cAAc,CAAC1B,QAAD,EAAW;AACvB,QAAIsC,CAAC,GAAG,IAAIrC,QAAJ,EAAR;AACAqC,IAAAA,CAAC,CAACpC,EAAF,GAAOF,QAAQ,CAACE,EAAhB;AACAoC,IAAAA,CAAC,CAAChC,IAAF,GAASN,QAAQ,CAACM,IAAlB;AACAgC,IAAAA,CAAC,CAAC/B,IAAF,GAASP,QAAQ,CAACuC,YAAlB;AAEAD,IAAAA,CAAC,CAACvB,KAAF,GAAU,IAAIC,OAAJ,EAAV;AACAsB,IAAAA,CAAC,CAACvB,KAAF,CAAQR,IAAR,GAAe,OAAf;AACA+B,IAAAA,CAAC,CAACvB,KAAF,CAAQE,IAAR,GAAejB,QAAQ,CAACwC,WAAxB;AAEAF,IAAAA,CAAC,CAACpB,KAAF,GAAU,IAAIF,OAAJ,EAAV;AACAsB,IAAAA,CAAC,CAACpB,KAAF,CAAQX,IAAR,GAAe,OAAf;AACA+B,IAAAA,CAAC,CAACpB,KAAF,CAAQD,IAAR,GAAejB,QAAQ,CAACkB,KAAxB;AAEAoB,IAAAA,CAAC,CAAC9B,OAAF,GAAY,IAAIC,OAAJ,EAAZ;AACA6B,IAAAA,CAAC,CAAC9B,OAAF,CAAUN,EAAV,GAAeF,QAAQ,CAACQ,OAAT,CAAiBN,EAAhC;AACAoC,IAAAA,CAAC,CAAC9B,OAAF,CAAUE,MAAV,GAAmBV,QAAQ,CAACQ,OAAT,CAAiBE,MAApC;AACA4B,IAAAA,CAAC,CAAC9B,OAAF,CAAUG,QAAV,GAAqBX,QAAQ,CAACQ,OAAT,CAAiBiC,YAAtC;AACAH,IAAAA,CAAC,CAAC9B,OAAF,CAAUI,QAAV,GAAqBZ,QAAQ,CAACQ,OAAT,CAAiBkC,UAAtC;AACAJ,IAAAA,CAAC,CAAC9B,OAAF,CAAUK,IAAV,GAAiBb,QAAQ,CAACQ,OAAT,CAAiBK,IAAlC;AACAyB,IAAAA,CAAC,CAAC9B,OAAF,CAAUM,MAAV,GAAmBd,QAAQ,CAACQ,OAAT,CAAiBM,MAApC;AACA,WAAOwB,CAAP;AACD;;AAEDK,EAAAA,cAAc,CAAC3C,QAAD,EAAW;AACvB,WAAO;AACLM,MAAAA,IAAI,EAAEN,QAAQ,CAACM,IADV;AAELiC,MAAAA,YAAY,EAAEvC,QAAQ,CAACO,IAFlB;AAGLqC,MAAAA,kBAAkB,EAAE,QAHf;AAIL1B,MAAAA,KAAK,EAAElB,QAAQ,CAACkB,KAAT,CAAeD,IAJjB;AAKLuB,MAAAA,WAAW,EAAExC,QAAQ,CAACe,KAAT,CAAeE,IALvB;AAMLT,MAAAA,OAAO,EAAE;AACPN,QAAAA,EAAE,EAAEF,QAAQ,CAACQ,OAAT,CAAiBN,EADd;AAEPQ,QAAAA,MAAM,EAAEV,QAAQ,CAACQ,OAAT,CAAiBE,MAFlB;AAGP+B,QAAAA,YAAY,EAAEzC,QAAQ,CAACQ,OAAT,CAAiBG,QAHxB;AAIP+B,QAAAA,UAAU,EAAE1C,QAAQ,CAACQ,OAAT,CAAiBI,QAJtB;AAKPC,QAAAA,IAAI,EAAEb,QAAQ,CAACQ,OAAT,CAAiBK,IALhB;AAMPC,QAAAA,MAAM,EAAEd,QAAQ,CAACQ,OAAT,CAAiBM,MANlB;AAOP+B,QAAAA,OAAO,EAAE7C,QAAQ,CAACQ,OAAT,CAAiBqC;AAPnB;AANJ,KAAP;AAgBD;;AAzGmB;;AA4GtB,eAAe/C,eAAf","sourcesContent":["import Connection from \"./Connection\";\n\nclass CustomerService {\n  getNewCustomer() {\n    let customer = new Customer();\n\n    customer.id = Math.random().toString();\n    customer.name = \"Firstname Lastname\";\n    customer.type = \"person\";\n\n    customer.address = new Address();\n    customer.address.street = \"Engelbrektsgatan\";\n    customer.address.streetNo = \"6\";\n    customer.address.postCode = \"21133\";\n    customer.address.city = \"Malmö\";\n    customer.address.region = \"Skåne\";\n\n    customer.phone = new Contact();\n    customer.phone.type = \"phone\";\n    customer.phone.text = \"0000-000000\";\n\n    customer.email = new Contact();\n    customer.email.type = \"email\";\n    customer.email.text = \"firstname.lastname@example.com\";\n\n    return customer;\n  }\n\n  async getCustomer(customerId) {\n    const data = await service\n      .get(`/customer/${customerId}`)\n      .then((response) => {\n        return response.data;\n      });\n    return this.jsonToCustomer(data);\n  }\n\n  async registerCustomer(customer) {\n    await service.post(`/customer`, customer).then((response) => {\n      alert(\"registerCustomer \" + response.data);\n    });\n  }\n\n  async editCustomer(customer) {\n    await service.put(`/customer`, customer).then((response) => {\n      alert(\"editCustomer \" + response.data);\n    });\n  }\n\n  async deleteCustomer(customerId) {\n    await service.delete(`/customer/${customerId}`).then((response) => {\n      alert(\"deleteCustomer \" + response.data);\n    });\n  }\n\n  async getCustomers() {\n    let customers = [];\n    const data = await service.get(\"/customer\").then((response) => {\n      return response.data;\n    });\n    data.forEach((customer) => {\n      customers.push(this.jsonToCustomer(customer));\n    });\n    return customers;\n  }\n\n  jsonToCustomer(customer) {\n    let c = new Customer();\n    c.id = customer.id;\n    c.name = customer.name;\n    c.type = customer.customerType;\n\n    c.phone = new Contact();\n    c.phone.type = \"phone\";\n    c.phone.text = customer.phoneNumber;\n\n    c.email = new Contact();\n    c.email.type = \"email\";\n    c.email.text = customer.email;\n\n    c.address = new Address();\n    c.address.id = customer.address.id;\n    c.address.street = customer.address.street;\n    c.address.streetNo = customer.address.streetNumber;\n    c.address.postCode = customer.address.postalCode;\n    c.address.city = customer.address.city;\n    c.address.region = customer.address.region;\n    return c;\n  }\n\n  customerToJson(customer) {\n    return {\n      name: customer.name,\n      customerType: customer.type,\n      registrationNumber: \"string\",\n      email: customer.email.text,\n      phoneNumber: customer.phone.text,\n      address: {\n        id: customer.address.id,\n        street: customer.address.street,\n        streetNumber: customer.address.streetNo,\n        postalCode: customer.address.postCode,\n        city: customer.address.city,\n        region: customer.address.region,\n        country: customer.address.country,\n      },\n    };\n  }\n}\n\nexport default CustomerService;\n"]},"metadata":{},"sourceType":"module"}