{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/erik/Desktop/Software/dex/client/src/Contexts/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, createContext } from \"react\";\nimport AuthService from \"../Shared/AuthService\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [authenticated, setAuthenticated] = useState(false);\n  const [hasLoaded, setHasLoaded] = useState(false);\n\n  const setAuth = async bool => {\n    setAuthenticated(bool);\n  };\n\n  const logout = async () => {\n    setAuth(false).then(() => {\n      localStorage.removeItem(\"refreshToken\");\n      sessionStorage.removeItem(\"accessToken\");\n    });\n  }; // Authentication when app launches\n\n\n  useEffect(() => {\n    console.log(\"authUseEffect\");\n\n    if (!hasLoaded) {\n      const authService = new AuthService();\n      authService.getRefreshToken().then(auth => {\n        setAuth(auth).then(() => {\n          if (auth) {\n            setTimeout(() => setHasLoaded(true), 1500);\n          } else {\n            logout().then(() => {\n              setHasLoaded(true);\n            });\n          }\n        });\n      }).catch(() => {\n        logout().then(() => {\n          setHasLoaded(true);\n        });\n      });\n    } // without the following line, useEffect is called twice.\n    // eslint-disable-next-line\n\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      hasLoaded: hasLoaded,\n      setAuth: setAuth,\n      auth: authenticated,\n      logout: logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"LF7z+CgqUO3h9FC9m1eS6zEhSjo=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/erik/Desktop/Software/dex/client/src/Contexts/AuthContext.js"],"names":["React","useState","useEffect","createContext","AuthService","AuthContext","AuthContextProvider","children","authenticated","setAuthenticated","hasLoaded","setHasLoaded","setAuth","bool","logout","then","localStorage","removeItem","sessionStorage","console","log","authService","getRefreshToken","auth","setTimeout","catch"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAO,MAAMC,WAAW,gBAAGF,aAAa,CAAC,IAAD,CAAjC;AAEP,OAAO,MAAMG,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMW,OAAO,GAAG,MAAOC,IAAP,IAAgB;AAC9BJ,IAAAA,gBAAgB,CAACI,IAAD,CAAhB;AACD,GAFD;;AAGA,QAAMC,MAAM,GAAG,YAAY;AACzBF,IAAAA,OAAO,CAAC,KAAD,CAAP,CAAeG,IAAf,CAAoB,MAAM;AACxBC,MAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACAC,MAAAA,cAAc,CAACD,UAAf,CAA0B,aAA1B;AACD,KAHD;AAID,GALD,CAPmD,CAcnD;;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,QAAI,CAACV,SAAL,EAAgB;AACd,YAAMW,WAAW,GAAG,IAAIjB,WAAJ,EAApB;AACAiB,MAAAA,WAAW,CACRC,eADH,GAEGP,IAFH,CAESQ,IAAD,IAAU;AACdX,QAAAA,OAAO,CAACW,IAAD,CAAP,CAAcR,IAAd,CAAmB,MAAM;AACvB,cAAIQ,IAAJ,EAAU;AACRC,YAAAA,UAAU,CAAC,MAAMb,YAAY,CAAC,IAAD,CAAnB,EAA2B,IAA3B,CAAV;AACD,WAFD,MAEO;AACLG,YAAAA,MAAM,GAAGC,IAAT,CAAc,MAAM;AAClBJ,cAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,aAFD;AAGD;AACF,SARD;AASD,OAZH,EAaGc,KAbH,CAaS,MAAM;AACXX,QAAAA,MAAM,GAAGC,IAAT,CAAc,MAAM;AAClBJ,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,SAFD;AAGD,OAjBH;AAkBD,KAtBa,CAuBd;AACA;;AACD,GAzBQ,EAyBN,EAzBM,CAAT;AA2BA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,SAAS,EAAEA,SADN;AAELE,MAAAA,OAAO,EAAEA,OAFJ;AAGLW,MAAAA,IAAI,EAAEf,aAHD;AAILM,MAAAA,MAAM,EAAEA;AAJH,KADT;AAAA,cAQGP;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAtDM;;GAAMD,mB;;KAAAA,mB","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\nimport AuthService from \"../Shared/AuthService\";\nexport const AuthContext = createContext(null);\n\nexport const AuthContextProvider = ({ children }) => {\n  const [authenticated, setAuthenticated] = useState(false);\n  const [hasLoaded, setHasLoaded] = useState(false);\n\n  const setAuth = async (bool) => {\n    setAuthenticated(bool);\n  };\n  const logout = async () => {\n    setAuth(false).then(() => {\n      localStorage.removeItem(\"refreshToken\");\n      sessionStorage.removeItem(\"accessToken\");\n    });\n  };\n\n  // Authentication when app launches\n  useEffect(() => {\n    console.log(\"authUseEffect\");\n    if (!hasLoaded) {\n      const authService = new AuthService();\n      authService\n        .getRefreshToken()\n        .then((auth) => {\n          setAuth(auth).then(() => {\n            if (auth) {\n              setTimeout(() => setHasLoaded(true), 1500);\n            } else {\n              logout().then(() => {\n                setHasLoaded(true);\n              });\n            }\n          });\n        })\n        .catch(() => {\n          logout().then(() => {\n            setHasLoaded(true);\n          });\n        });\n    }\n    // without the following line, useEffect is called twice.\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        hasLoaded: hasLoaded,\n        setAuth: setAuth,\n        auth: authenticated,\n        logout: logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}