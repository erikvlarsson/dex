{"ast":null,"code":"import axios from \"axios\";\nconst baseURL = process.env.NODE_ENV === \"production\" ? \"\" : \"http://localhost:5000/\";\nconst Api = axios.create({\n  baseURL: baseURL\n});\n\nclass AuthService {\n  async signup(userData) {\n    let auth = null;\n    await Api.post(\"/signup\", userData).then(response => {\n      if (response.status === 201) {\n        sessionStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        sessionStorage.user.id = response.data.userId;\n        localStorage.user = {\n          email: userData.email,\n          id: response.data.id\n        };\n        auth = true;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return auth;\n  }\n\n  async login(userData) {\n    let auth = false;\n    await Api.post(\"/login\", userData).then(response => {\n      if (response.status === 200) {\n        auth = true;\n        sessionStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        localStorage.email = userData.email;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return auth;\n  }\n\n  async getRefreshToken() {\n    let auth = null;\n    await Api.post(\"/getRefreshToken\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.refreshToken\n      }\n    }).then(response => {\n      if (response.status === 201) {\n        sessionStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        auth = true;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return auth;\n  }\n\n  async getAccessToken() {\n    let auth = null;\n    await Api.post(\"/getAccessToken\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.refreshToken\n      }\n    }).then(response => {\n      if (response.status === 201) {\n        sessionStorage.accessToken = response.data.accessToken;\n        auth = true;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return auth;\n  }\n\n}\n\nexport default AuthService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/dex/client/src/Shared/AuthService.js"],"names":["axios","baseURL","process","env","NODE_ENV","Api","create","AuthService","signup","userData","auth","post","then","response","status","sessionStorage","accessToken","data","localStorage","refreshToken","user","id","userId","email","catch","error","console","log","login","getRefreshToken","headers","Authorization","getAccessToken"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nconst baseURL =\n  process.env.NODE_ENV === \"production\" ? \"\" : \"http://localhost:5000/\";\n\nconst Api = axios.create({\n  baseURL: baseURL,\n});\n\nclass AuthService {\n  async signup(userData) {\n    let auth = null;\n    await Api.post(\"/signup\", userData)\n      .then((response) => {\n        if (response.status === 201) {\n          sessionStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          sessionStorage.user.id = response.data.userId;\n          localStorage.user = {\n            email: userData.email,\n            id: response.data.id,\n          };\n          auth = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return auth;\n  }\n\n  async login(userData) {\n    let auth = false;\n    await Api.post(\"/login\", userData)\n      .then((response) => {\n        if (response.status === 200) {\n          auth = true;\n          sessionStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          localStorage.email = userData.email;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return auth;\n  }\n\n  async getRefreshToken() {\n    let auth = null;\n    await Api.post(\n      \"/getRefreshToken\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.refreshToken,\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 201) {\n          sessionStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          auth = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return auth;\n  }\n\n  async getAccessToken() {\n    let auth = null;\n    await Api.post(\n      \"/getAccessToken\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.refreshToken,\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 201) {\n          sessionStorage.accessToken = response.data.accessToken;\n          auth = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return auth;\n  }\n}\n\nexport default AuthService;\n"]},"metadata":{},"sourceType":"module"}