{"ast":null,"code":"import Api from \"./Api\";\n\nclass UserService {\n  // returns only response status code\n  async register(userData) {\n    let res = null;\n    await Api.post(\"/register\", userData).then(response => {\n      if (response.status === 201) {\n        res = true;\n      }\n    }).catch(error => {\n      res = error;\n    });\n    return res;\n  } // returns only response status code\n\n\n  async authorize() {\n    let res = null;\n    await Api.post(\"/authorize\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.access_token //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      res = response;\n    }).catch(error => {\n      res = error.response;\n    });\n    return res;\n  } // returns the new accessToken or null\n\n\n  async renewAccessToken() {\n    let newAccessToken = null;\n    await Api.post(\"/renewAccessToken\", {}, {\n      headers: {\n        refreshToken: \"Bearer \" + localStorage.refresh_token //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        console.log(\"renewAccessToken()\");\n        console.log(response); // newAccessToken =\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return newAccessToken;\n  } // returns only response status code while saving tokens to localStorage\n\n\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData).then(response => {\n      if (response.status === 200) {\n        res = response.status;\n        localStorage.access_token = response.data.access_token;\n        localStorage.refresh_token = response.data.refresh_token;\n        localStorage.email = userData.email;\n      }\n    }).catch(error => {\n      res = error.response.status;\n    });\n    return res;\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Shared/UserService.js"],"names":["Api","UserService","register","userData","res","post","then","response","status","catch","error","authorize","headers","Authorization","localStorage","access_token","renewAccessToken","newAccessToken","refreshToken","refresh_token","console","log","login","data","email"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,WAAN,CAAkB;AAChB;AACA,QAAMC,QAAN,CAAeC,QAAf,EAAyB;AACvB,QAAIC,GAAG,GAAG,IAAV;AACA,UAAMJ,GAAG,CAACK,IAAJ,CAAS,WAAT,EAAsBF,QAAtB,EACHG,IADG,CACGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BJ,QAAAA,GAAG,GAAG,IAAN;AACD;AACF,KALG,EAMHK,KANG,CAMIC,KAAD,IAAW;AAChBN,MAAAA,GAAG,GAAGM,KAAN;AACD,KARG,CAAN;AASA,WAAON,GAAP;AACD,GAde,CAgBhB;;;AACA,QAAMO,SAAN,GAAkB;AAChB,QAAIP,GAAG,GAAG,IAAV;AACA,UAAMJ,GAAG,CAACK,IAAJ,CACJ,YADI,EAEJ,EAFI,EAGJ;AACEO,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYC,YAAY,CAACC,YADjC,CAC+C;;AAD/C;AADX,KAHI,EASHT,IATG,CASGC,QAAD,IAAc;AAClBH,MAAAA,GAAG,GAAGG,QAAN;AACD,KAXG,EAYHE,KAZG,CAYIC,KAAD,IAAW;AAChBN,MAAAA,GAAG,GAAGM,KAAK,CAACH,QAAZ;AACD,KAdG,CAAN;AAeA,WAAOH,GAAP;AACD,GAnCe,CAqChB;;;AACA,QAAMY,gBAAN,GAAyB;AACvB,QAAIC,cAAc,GAAG,IAArB;AACA,UAAMjB,GAAG,CAACK,IAAJ,CACJ,mBADI,EAEJ,EAFI,EAGJ;AACEO,MAAAA,OAAO,EAAE;AACPM,QAAAA,YAAY,EAAE,YAAYJ,YAAY,CAACK,aADhC,CAC+C;;AAD/C;AADX,KAHI,EASHb,IATG,CASGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BY,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYd,QAAZ,EAF2B,CAG3B;AACD;AACF,KAfG,EAgBHE,KAhBG,CAgBIC,KAAD,IAAW;AAChBU,MAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACD,KAlBG,CAAN;AAmBA,WAAOO,cAAP;AACD,GA5De,CA8DhB;;;AACA,QAAMK,KAAN,CAAYnB,QAAZ,EAAsB;AACpB,QAAIC,GAAG,GAAG,IAAV;AACA,UAAMJ,GAAG,CAACK,IAAJ,CAAS,QAAT,EAAmBF,QAAnB,EACHG,IADG,CACGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BJ,QAAAA,GAAG,GAAGG,QAAQ,CAACC,MAAf;AACAM,QAAAA,YAAY,CAACC,YAAb,GAA4BR,QAAQ,CAACgB,IAAT,CAAcR,YAA1C;AACAD,QAAAA,YAAY,CAACK,aAAb,GAA6BZ,QAAQ,CAACgB,IAAT,CAAcJ,aAA3C;AACAL,QAAAA,YAAY,CAACU,KAAb,GAAqBrB,QAAQ,CAACqB,KAA9B;AACD;AACF,KARG,EASHf,KATG,CASIC,KAAD,IAAW;AAChBN,MAAAA,GAAG,GAAGM,KAAK,CAACH,QAAN,CAAeC,MAArB;AACD,KAXG,CAAN;AAYA,WAAOJ,GAAP;AACD;;AA9Ee;;AAiFlB,eAAeH,WAAf","sourcesContent":["import Api from \"./Api\";\n\nclass UserService {\n  // returns only response status code\n  async register(userData) {\n    let res = null;\n    await Api.post(\"/register\", userData)\n      .then((response) => {\n        if (response.status === 201) {\n          res = true;\n        }\n      })\n      .catch((error) => {\n        res = error;\n      });\n    return res;\n  }\n\n  // returns only response status code\n  async authorize() {\n    let res = null;\n    await Api.post(\n      \"/authorize\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.access_token, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        res = response;\n      })\n      .catch((error) => {\n        res = error.response;\n      });\n    return res;\n  }\n\n  // returns the new accessToken or null\n  async renewAccessToken() {\n    let newAccessToken = null;\n    await Api.post(\n      \"/renewAccessToken\",\n      {},\n      {\n        headers: {\n          refreshToken: \"Bearer \" + localStorage.refresh_token, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 200) {\n          console.log(\"renewAccessToken()\");\n          console.log(response);\n          // newAccessToken =\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return newAccessToken;\n  }\n\n  // returns only response status code while saving tokens to localStorage\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData)\n      .then((response) => {\n        if (response.status === 200) {\n          res = response.status;\n          localStorage.access_token = response.data.access_token;\n          localStorage.refresh_token = response.data.refresh_token;\n          localStorage.email = userData.email;\n        }\n      })\n      .catch((error) => {\n        res = error.response.status;\n      });\n    return res;\n  }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}