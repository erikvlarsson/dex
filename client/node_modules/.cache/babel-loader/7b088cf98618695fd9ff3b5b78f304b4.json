{"ast":null,"code":"import Api from \"./Api\";\n\nclass UserService {\n  // returns only response status code\n  async signup(userData) {\n    let res = null;\n    await Api.post(\"/signup\", userData).then(response => {\n      if (response.status === 201) {\n        localStorage.access_token = response.data.access_token;\n        localStorage.refresh_token = response.data.refresh_token;\n        localStorage.email = userData.email;\n        res = 201;\n      }\n    }).catch(error => {\n      res = error;\n    });\n    return res;\n  } // returns only response status code while saving tokens to localStorage\n\n\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData).then(response => {\n      if (response.status === 200) {\n        res = 200;\n        localStorage.access_token = response.data.access_token;\n        localStorage.refresh_token = response.data.refresh_token;\n        localStorage.email = userData.email;\n      }\n    }).catch(error => {\n      res = error.response.status;\n    });\n    return res;\n  } // returns only response status code\n\n\n  async authorize() {\n    let res = null;\n    await Api.post(\"/authorize\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.access_token //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      res = response;\n    }).catch(error => {\n      res = error.response;\n    });\n    return res;\n  } // returns the new accessToken or null\n\n\n  async renewTokens() {\n    let newAccessToken = null;\n    await Api.post(\"/renewTokens\", {}, {\n      headers: {\n        refreshToken: \"Bearer \" + localStorage.refresh_token //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        console.log(\"renewAccessToken()\");\n        console.log(response); // newAccessToken =\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return newAccessToken;\n  } // returns the new accessToken or null\n\n\n  async renewAccessToken() {\n    let newAccessToken = null;\n    await Api.post(\"/renewAccessToken\", {}, {\n      headers: {\n        refreshToken: \"Bearer \" + localStorage.refresh_token //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        console.log(\"renewAccessToken()\");\n        console.log(response); // newAccessToken =\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return newAccessToken;\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Shared/UserService.js"],"names":["Api","UserService","signup","userData","res","post","then","response","status","localStorage","access_token","data","refresh_token","email","catch","error","login","authorize","headers","Authorization","renewTokens","newAccessToken","refreshToken","console","log","renewAccessToken"],"mappings":"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","sourcesContent":["import Api from \"./Api\";\n\nclass UserService {\n  // returns only response status code\n  async signup(userData) {\n    let res = null;\n    await Api.post(\"/signup\", userData)\n      .then((response) => {\n        if (response.status === 201) {\n          localStorage.access_token = response.data.access_token;\n          localStorage.refresh_token = response.data.refresh_token;\n          localStorage.email = userData.email;\n          res = 201;\n        }\n      })\n      .catch((error) => {\n        res = error;\n      });\n    return res;\n  }\n\n  // returns only response status code while saving tokens to localStorage\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData)\n      .then((response) => {\n        if (response.status === 200) {\n          res = 200;\n          localStorage.access_token = response.data.access_token;\n          localStorage.refresh_token = response.data.refresh_token;\n          localStorage.email = userData.email;\n        }\n      })\n      .catch((error) => {\n        res = error.response.status;\n      });\n    return res;\n  }\n\n  // returns only response status code\n  async authorize() {\n    let res = null;\n    await Api.post(\n      \"/authorize\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.access_token, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        res = response;\n      })\n      .catch((error) => {\n        res = error.response;\n      });\n    return res;\n  }\n\n  // returns the new accessToken or null\n  async renewTokens() {\n    let newAccessToken = null;\n    await Api.post(\n      \"/renewTokens\",\n      {},\n      {\n        headers: {\n          refreshToken: \"Bearer \" + localStorage.refresh_token, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 200) {\n          console.log(\"renewAccessToken()\");\n          console.log(response);\n          // newAccessToken =\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return newAccessToken;\n  }\n\n  // returns the new accessToken or null\n  async renewAccessToken() {\n    let newAccessToken = null;\n    await Api.post(\n      \"/renewAccessToken\",\n      {},\n      {\n        headers: {\n          refreshToken: \"Bearer \" + localStorage.refresh_token, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 200) {\n          console.log(\"renewAccessToken()\");\n          console.log(response);\n          // newAccessToken =\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return newAccessToken;\n  }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}