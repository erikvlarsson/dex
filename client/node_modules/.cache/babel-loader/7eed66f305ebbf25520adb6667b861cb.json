{"ast":null,"code":"import Api from \"./Api\";\n\nclass UserService {\n  async signup(userData) {\n    let auth = null;\n    await Api.post(\"/signup\", userData).then(response => {\n      if (response.status === 201) {\n        sessionStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        auth = true;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return auth;\n  }\n\n  async login(userData) {\n    let auth = false;\n    await Api.post(\"/login\", userData).then(response => {\n      if (response.status === 200) {\n        auth = true;\n        sessionStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        localStorage.email = userData.email;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return auth;\n  }\n\n  async getRefreshToken() {\n    let auth = null;\n    await Api.post(\"/getRefreshToken\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.refreshToken\n      }\n    }).then(response => {\n      if (response.status === 201) {\n        sessionStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        auth = true;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return auth;\n  }\n\n  async getAccessToken() {\n    let auth = null;\n    await Api.post(\"/getAccessToken\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.refreshToken\n      }\n    }).then(response => {\n      if (response.status === 201) {\n        sessionStorage.accessToken = response.data.accessToken;\n        auth = true;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return auth;\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Shared/UserService.js"],"names":["Api","UserService","signup","userData","auth","post","then","response","status","sessionStorage","accessToken","data","localStorage","refreshToken","catch","error","console","log","login","email","getRefreshToken","headers","Authorization","getAccessToken"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,WAAN,CAAkB;AAChB,QAAMC,MAAN,CAAaC,QAAb,EAAuB;AACrB,QAAIC,IAAI,GAAG,IAAX;AACA,UAAMJ,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoBF,QAApB,EACHG,IADG,CACGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,QAAAA,cAAc,CAACC,WAAf,GAA6BH,QAAQ,CAACI,IAAT,CAAcD,WAA3C;AACAE,QAAAA,YAAY,CAACC,YAAb,GAA4BN,QAAQ,CAACI,IAAT,CAAcE,YAA1C;AACAT,QAAAA,IAAI,GAAG,IAAP;AACD;AACF,KAPG,EAQHU,KARG,CAQIC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAVG,CAAN;AAWA,WAAOX,IAAP;AACD;;AAED,QAAMc,KAAN,CAAYf,QAAZ,EAAsB;AACpB,QAAIC,IAAI,GAAG,KAAX;AACA,UAAMJ,GAAG,CAACK,IAAJ,CAAS,QAAT,EAAmBF,QAAnB,EACHG,IADG,CACGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BJ,QAAAA,IAAI,GAAG,IAAP;AACAK,QAAAA,cAAc,CAACC,WAAf,GAA6BH,QAAQ,CAACI,IAAT,CAAcD,WAA3C;AACAE,QAAAA,YAAY,CAACC,YAAb,GAA4BN,QAAQ,CAACI,IAAT,CAAcE,YAA1C;AACAD,QAAAA,YAAY,CAACO,KAAb,GAAqBhB,QAAQ,CAACgB,KAA9B;AACD;AACF,KARG,EASHL,KATG,CASIC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAXG,CAAN;AAYA,WAAOX,IAAP;AACD;;AAED,QAAMgB,eAAN,GAAwB;AACtB,QAAIhB,IAAI,GAAG,IAAX;AACA,UAAMJ,GAAG,CAACK,IAAJ,CACJ,kBADI,EAEJ,EAFI,EAGJ;AACEgB,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYV,YAAY,CAACC;AADjC;AADX,KAHI,EASHP,IATG,CASGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,QAAAA,cAAc,CAACC,WAAf,GAA6BH,QAAQ,CAACI,IAAT,CAAcD,WAA3C;AACAE,QAAAA,YAAY,CAACC,YAAb,GAA4BN,QAAQ,CAACI,IAAT,CAAcE,YAA1C;AACAT,QAAAA,IAAI,GAAG,IAAP;AACD;AACF,KAfG,EAgBHU,KAhBG,CAgBIC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAlBG,CAAN;AAmBA,WAAOX,IAAP;AACD;;AAED,QAAMmB,cAAN,GAAuB;AACrB,QAAInB,IAAI,GAAG,IAAX;AACA,UAAMJ,GAAG,CAACK,IAAJ,CACJ,iBADI,EAEJ,EAFI,EAGJ;AACEgB,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYV,YAAY,CAACC;AADjC;AADX,KAHI,EASHP,IATG,CASGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,QAAAA,cAAc,CAACC,WAAf,GAA6BH,QAAQ,CAACI,IAAT,CAAcD,WAA3C;AACAN,QAAAA,IAAI,GAAG,IAAP;AACD;AACF,KAdG,EAeHU,KAfG,CAeIC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAjBG,CAAN;AAkBA,WAAOX,IAAP;AACD;;AA/Ee;;AAkFlB,eAAeH,WAAf","sourcesContent":["import Api from \"./Api\";\n\nclass UserService {\n  async signup(userData) {\n    let auth = null;\n    await Api.post(\"/signup\", userData)\n      .then((response) => {\n        if (response.status === 201) {\n          sessionStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          auth = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return auth;\n  }\n\n  async login(userData) {\n    let auth = false;\n    await Api.post(\"/login\", userData)\n      .then((response) => {\n        if (response.status === 200) {\n          auth = true;\n          sessionStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          localStorage.email = userData.email;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return auth;\n  }\n\n  async getRefreshToken() {\n    let auth = null;\n    await Api.post(\n      \"/getRefreshToken\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.refreshToken,\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 201) {\n          sessionStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          auth = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return auth;\n  }\n\n  async getAccessToken() {\n    let auth = null;\n    await Api.post(\n      \"/getAccessToken\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.refreshToken,\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 201) {\n          sessionStorage.accessToken = response.data.accessToken;\n          auth = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return auth;\n  }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}