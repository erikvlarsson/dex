{"ast":null,"code":"import Api from \"./Api\";\nimport showAlert from \"../Components/Alert/ShowAlert\";\n\nclass UserService {\n  // returns only response status code\n  async register(userData) {\n    let res = null;\n    await Api.post(\"/register\", userData).then(response => {\n      if (response.status === 201) {\n        res = true;\n      }\n    }).catch(error => {\n      showAlert(error.response.status, error);\n      res = error;\n    });\n    return res;\n  } // returns only response status code\n\n\n  async authorize() {\n    let res = null;\n    await Api.post(\"/authorize\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.access_token //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      showAlert(response.status, JSON.stringify(response));\n      res = response.status;\n    }).catch(error => {// res = error.response.status;\n    });\n    return res;\n  } // returns only response status code\n\n\n  async renewAccessToken() {\n    let res = null;\n    await Api.post(\"/renewAccessToken\", {}, {\n      headers: {\n        refreshToken: \"Bearer \" + localStorage.refresh_token //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      res = response.status;\n    }).catch(error => {\n      res = error.response.status;\n    });\n    return res;\n  } // returns only response status code\n\n\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData).then(response => {\n      if (response.status === 200) {\n        res = response.status;\n        localStorage.access_token = response.data.access_token;\n        localStorage.refresh_token = response.data.refresh_token;\n        localStorage.email = userData.email;\n      }\n    }).catch(error => {\n      res = error.response.status;\n    });\n    return res;\n  }\n\n  async getUsers() {\n    let res = null;\n    await Api.get(\"/users\").then(response => {\n      res = response;\n    });\n    return res;\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Shared/UserService.js"],"names":["Api","showAlert","UserService","register","userData","res","post","then","response","status","catch","error","authorize","headers","Authorization","localStorage","access_token","JSON","stringify","renewAccessToken","refreshToken","refresh_token","login","data","email","getUsers","get"],"mappings":"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","sourcesContent":["import Api from \"./Api\";\nimport showAlert from \"../Components/Alert/ShowAlert\";\n\nclass UserService {\n  // returns only response status code\n  async register(userData) {\n    let res = null;\n    await Api.post(\"/register\", userData)\n      .then((response) => {\n        if (response.status === 201) {\n          res = true;\n        }\n      })\n      .catch((error) => {\n        showAlert(error.response.status, error);\n        res = error;\n      });\n    return res;\n  }\n\n  // returns only response status code\n  async authorize() {\n    let res = null;\n    await Api.post(\n      \"/authorize\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.access_token, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        showAlert(response.status, JSON.stringify(response));\n        res = response.status;\n      })\n      .catch((error) => {\n        // res = error.response.status;\n      });\n    return res;\n  }\n\n  // returns only response status code\n  async renewAccessToken() {\n    let res = null;\n    await Api.post(\n      \"/renewAccessToken\",\n      {},\n      {\n        headers: {\n          refreshToken: \"Bearer \" + localStorage.refresh_token, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        res = response.status;\n      })\n      .catch((error) => {\n        res = error.response.status;\n      });\n    return res;\n  }\n\n  // returns only response status code\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData)\n      .then((response) => {\n        if (response.status === 200) {\n          res = response.status;\n          localStorage.access_token = response.data.access_token;\n          localStorage.refresh_token = response.data.refresh_token;\n          localStorage.email = userData.email;\n        }\n      })\n      .catch((error) => {\n        res = error.response.status;\n      });\n    return res;\n  }\n\n  async getUsers() {\n    let res = null;\n    await Api.get(\"/users\").then((response) => {\n      res = response;\n    });\n    return res;\n  }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}