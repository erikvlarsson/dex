{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/erik/Desktop/Software/frontend/src/AppMain.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from \"react\";\nimport UserService from \"./Shared/UserService\";\nimport Routes from \"./Routes\";\nimport LoadingScreen from \"./Components/Loading/LoadingScreen\";\nimport { AuthContext } from \"./Contexts/AuthContext\";\n\nfunction AppMain() {\n  _s();\n\n  const {\n    auth,\n    setAuth,\n    logout\n  } = useContext(AuthContext);\n  const [hasLoaded, setHasLoaded] = useState(false);\n  useEffect(() => {\n    if (!hasLoaded) {\n      const userService = new UserService();\n      userService.getRefreshToken().then(auth => {\n        setAuth(auth).then(() => {\n          if (auth) {\n            setTimeout(() => setHasLoaded(true), 1500);\n          } else {\n            logout().then(() => {\n              setHasLoaded(true);\n            });\n          }\n        });\n      }).catch(() => {\n        logout();\n        setHasLoaded(true);\n      });\n    }\n  }, [hasLoaded, setAuth, setHasLoaded]);\n\n  if (!hasLoaded) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        auth: auth,\n        hasLoaded: hasLoaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"alert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(AppMain, \"yhvg/M2jDA3e304EkWvAn+QghqU=\");\n\n_c = AppMain;\nexport default AppMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppMain\");","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/AppMain.js"],"names":["useEffect","useState","useContext","UserService","Routes","LoadingScreen","AuthContext","AppMain","auth","setAuth","logout","hasLoaded","setHasLoaded","userService","getRefreshToken","then","setTimeout","catch"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,oCAA1B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACjB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA4BR,UAAU,CAACI,WAAD,CAA5C;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,SAAL,EAAgB;AACd,YAAME,WAAW,GAAG,IAAIV,WAAJ,EAApB;AACAU,MAAAA,WAAW,CACRC,eADH,GAEGC,IAFH,CAESP,IAAD,IAAU;AACdC,QAAAA,OAAO,CAACD,IAAD,CAAP,CAAcO,IAAd,CAAmB,MAAM;AACvB,cAAIP,IAAJ,EAAU;AACRQ,YAAAA,UAAU,CAAC,MAAMJ,YAAY,CAAC,IAAD,CAAnB,EAA2B,IAA3B,CAAV;AACD,WAFD,MAEO;AACLF,YAAAA,MAAM,GAAGK,IAAT,CAAc,MAAM;AAClBH,cAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,aAFD;AAGD;AACF,SARD;AASD,OAZH,EAaGK,KAbH,CAaS,MAAM;AACXP,QAAAA,MAAM;AACNE,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,OAhBH;AAiBD;AACF,GArBQ,EAqBN,CAACD,SAAD,EAAYF,OAAZ,EAAqBG,YAArB,CArBM,CAAT;;AAuBA,MAAI,CAACD,SAAL,EAAgB;AACd,wBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAEH,IAAd;AAAoB,QAAA,SAAS,EAAEG;AAA/B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;AACF;;GArCQJ,O;;KAAAA,O;AAuCT,eAAeA,OAAf","sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport UserService from \"./Shared/UserService\";\nimport Routes from \"./Routes\";\nimport LoadingScreen from \"./Components/Loading/LoadingScreen\";\nimport { AuthContext } from \"./Contexts/AuthContext\";\n\nfunction AppMain() {\n  const { auth, setAuth, logout } = useContext(AuthContext);\n  const [hasLoaded, setHasLoaded] = useState(false);\n\n  useEffect(() => {\n    if (!hasLoaded) {\n      const userService = new UserService();\n      userService\n        .getRefreshToken()\n        .then((auth) => {\n          setAuth(auth).then(() => {\n            if (auth) {\n              setTimeout(() => setHasLoaded(true), 1500);\n            } else {\n              logout().then(() => {\n                setHasLoaded(true);\n              });\n            }\n          });\n        })\n        .catch(() => {\n          logout();\n          setHasLoaded(true);\n        });\n    }\n  }, [hasLoaded, setAuth, setHasLoaded]);\n\n  if (!hasLoaded) {\n    return <LoadingScreen />;\n  } else {\n    return (\n      <div className=\"App\">\n        <Routes auth={auth} hasLoaded={hasLoaded} />\n        <div id=\"alert\" />\n      </div>\n    );\n  }\n}\n\nexport default AppMain;\n"]},"metadata":{},"sourceType":"module"}