{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/erik/Desktop/Software/dex/client/src/Pages/Home/Components/Journal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport PostService from \"../../../Shared/PostService\";\nimport JournalForm from \"../Components/JournalForm\";\nimport Post from \"../Components/Post\";\nexport default function Journal() {\n  _s();\n\n  const [hasLoaded, setHasLoaded] = useState(false);\n  const [posts, setPosts] = useState(null);\n  const postService = new PostService();\n  useEffect(() => {\n    if (!hasLoaded) {\n      refreshPosts();\n    }\n  });\n\n  const refreshPosts = () => {\n    postService.getPosts().then(posts => {\n      if (posts) {\n        setPosts(posts.reverse());\n        setHasLoaded(true);\n      }\n    });\n  };\n\n  const createPost = text => {\n    postService.createPost(\"text\", text).then(() => {\n      refreshPosts();\n    });\n  };\n\n  const deletePost = postId => {\n    postService.deletePost(postId).then(() => {\n      refreshPosts();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(JournalForm, {\n      refreshPosts: refreshPosts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), posts && posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      data: post,\n      deletePost: deletePost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 31\n    }, this)) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Journal, \"pFK+hCsiUL5nIzu06Zu06UQBOe0=\");\n\n_c = Journal;\n\nvar _c;\n\n$RefreshReg$(_c, \"Journal\");","map":{"version":3,"sources":["/Users/erik/Desktop/Software/dex/client/src/Pages/Home/Components/Journal.js"],"names":["React","useEffect","useState","PostService","JournalForm","Post","Journal","hasLoaded","setHasLoaded","posts","setPosts","postService","refreshPosts","getPosts","then","reverse","createPost","text","deletePost","postId","length","map","post"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAChC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAMS,WAAW,GAAG,IAAIR,WAAJ,EAApB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,SAAL,EAAgB;AACdK,MAAAA,YAAY;AACb;AACF,GAJQ,CAAT;;AAMA,QAAMA,YAAY,GAAG,MAAM;AACzBD,IAAAA,WAAW,CAACE,QAAZ,GAAuBC,IAAvB,CAA6BL,KAAD,IAAW;AACrC,UAAIA,KAAJ,EAAW;AACTC,QAAAA,QAAQ,CAACD,KAAK,CAACM,OAAN,EAAD,CAAR;AACAP,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,KALD;AAMD,GAPD;;AASA,QAAMQ,UAAU,GAAIC,IAAD,IAAU;AAC3BN,IAAAA,WAAW,CAACK,UAAZ,CAAuB,MAAvB,EAA+BC,IAA/B,EAAqCH,IAArC,CAA0C,MAAM;AAC9CF,MAAAA,YAAY;AACb,KAFD;AAGD,GAJD;;AAMA,QAAMM,UAAU,GAAIC,MAAD,IAAY;AAC7BR,IAAAA,WAAW,CAACO,UAAZ,CAAuBC,MAAvB,EAA+BL,IAA/B,CAAoC,MAAM;AACxCF,MAAAA,YAAY;AACb,KAFD;AAGD,GAJD;;AAMA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,YAAY,EAAEA;AAA3B;AAAA;AAAA;AAAA;AAAA,YADF,EAEGH,KAAK,IAAIA,KAAK,CAACW,MAAN,GAAe,CAAxB,GACGX,KAAK,CAACY,GAAN,CAAWC,IAAD,iBAAU,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,IAAZ;AAAkB,MAAA,UAAU,EAAEJ;AAA9B;AAAA;AAAA;AAAA;AAAA,YAApB,CADH,GAEG,IAJN;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GAxCuBZ,O;;KAAAA,O","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport PostService from \"../../../Shared/PostService\";\nimport JournalForm from \"../Components/JournalForm\";\nimport Post from \"../Components/Post\";\n\nexport default function Journal() {\n  const [hasLoaded, setHasLoaded] = useState(false);\n  const [posts, setPosts] = useState(null);\n  const postService = new PostService();\n\n  useEffect(() => {\n    if (!hasLoaded) {\n      refreshPosts();\n    }\n  });\n\n  const refreshPosts = () => {\n    postService.getPosts().then((posts) => {\n      if (posts) {\n        setPosts(posts.reverse());\n        setHasLoaded(true);\n      }\n    });\n  };\n\n  const createPost = (text) => {\n    postService.createPost(\"text\", text).then(() => {\n      refreshPosts();\n    });\n  };\n\n  const deletePost = (postId) => {\n    postService.deletePost(postId).then(() => {\n      refreshPosts();\n    });\n  };\n\n  return (\n    <div>\n      <JournalForm refreshPosts={refreshPosts} />\n      {posts && posts.length > 0\n        ? posts.map((post) => <Post data={post} deletePost={deletePost} />)\n        : null}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}