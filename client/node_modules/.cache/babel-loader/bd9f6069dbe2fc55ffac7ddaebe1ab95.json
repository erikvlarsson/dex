{"ast":null,"code":"import Api from \"./Api\";\n\nclass PostService {\n  async submitPost(post) {\n    let result = null;\n    await Api.post(\"/posts\", post).then(response => {\n      if (response.status === 201) {\n        result = true;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return result;\n  }\n\n  async getPosts(userData) {\n    let auth = false;\n    await Api.post(\"/login\", userData).then(response => {\n      if (response.status === 200) {\n        auth = true;\n        sessionStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        localStorage.email = userData.email;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return auth;\n  }\n\n  async deletePost() {\n    let posts = null;\n    await Api.post(\"/getPosts\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.refreshToken\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        posts = response.data;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return posts;\n  }\n\n  async deletePost() {\n    let posts = null;\n    await Api.post(\"/getPosts\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.refreshToken\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        posts = response.data;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return posts;\n  }\n\n}\n\nexport default PostService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Shared/PostService.js"],"names":["Api","PostService","submitPost","post","result","then","response","status","catch","error","console","log","getPosts","userData","auth","sessionStorage","accessToken","data","localStorage","refreshToken","email","deletePost","posts","headers","Authorization"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,WAAN,CAAkB;AAChB,QAAMC,UAAN,CAAiBC,IAAjB,EAAuB;AACrB,QAAIC,MAAM,GAAG,IAAb;AACA,UAAMJ,GAAG,CAACG,IAAJ,CAAS,QAAT,EAAmBA,IAAnB,EACHE,IADG,CACGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BH,QAAAA,MAAM,GAAG,IAAT;AACD;AACF,KALG,EAMHI,KANG,CAMIC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KARG,CAAN;AASA,WAAOL,MAAP;AACD;;AAED,QAAMQ,QAAN,CAAeC,QAAf,EAAyB;AACvB,QAAIC,IAAI,GAAG,KAAX;AACA,UAAMd,GAAG,CAACG,IAAJ,CAAS,QAAT,EAAmBU,QAAnB,EACHR,IADG,CACGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BO,QAAAA,IAAI,GAAG,IAAP;AACAC,QAAAA,cAAc,CAACC,WAAf,GAA6BV,QAAQ,CAACW,IAAT,CAAcD,WAA3C;AACAE,QAAAA,YAAY,CAACC,YAAb,GAA4Bb,QAAQ,CAACW,IAAT,CAAcE,YAA1C;AACAD,QAAAA,YAAY,CAACE,KAAb,GAAqBP,QAAQ,CAACO,KAA9B;AACD;AACF,KARG,EASHZ,KATG,CASIC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAXG,CAAN;AAYA,WAAOK,IAAP;AACD;;AAED,QAAMO,UAAN,GAAmB;AACjB,QAAIC,KAAK,GAAG,IAAZ;AACA,UAAMtB,GAAG,CAACG,IAAJ,CACJ,WADI,EAEJ,EAFI,EAGJ;AACEoB,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYN,YAAY,CAACC;AADjC;AADX,KAHI,EASHd,IATG,CASGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3Be,QAAAA,KAAK,GAAGhB,QAAQ,CAACW,IAAjB;AACD;AACF,KAbG,EAcHT,KAdG,CAcIC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAhBG,CAAN;AAiBA,WAAOa,KAAP;AACD;;AAED,QAAMD,UAAN,GAAmB;AACjB,QAAIC,KAAK,GAAG,IAAZ;AACA,UAAMtB,GAAG,CAACG,IAAJ,CACJ,WADI,EAEJ,EAFI,EAGJ;AACEoB,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYN,YAAY,CAACC;AADjC;AADX,KAHI,EASHd,IATG,CASGC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3Be,QAAAA,KAAK,GAAGhB,QAAQ,CAACW,IAAjB;AACD;AACF,KAbG,EAcHT,KAdG,CAcIC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAhBG,CAAN;AAiBA,WAAOa,KAAP;AACD;;AA1Ee;;AA6ElB,eAAerB,WAAf","sourcesContent":["import Api from \"./Api\";\n\nclass PostService {\n  async submitPost(post) {\n    let result = null;\n    await Api.post(\"/posts\", post)\n      .then((response) => {\n        if (response.status === 201) {\n          result = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return result;\n  }\n\n  async getPosts(userData) {\n    let auth = false;\n    await Api.post(\"/login\", userData)\n      .then((response) => {\n        if (response.status === 200) {\n          auth = true;\n          sessionStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          localStorage.email = userData.email;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return auth;\n  }\n\n  async deletePost() {\n    let posts = null;\n    await Api.post(\n      \"/getPosts\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.refreshToken,\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 200) {\n          posts = response.data;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return posts;\n  }\n\n  async deletePost() {\n    let posts = null;\n    await Api.post(\n      \"/getPosts\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.refreshToken,\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 200) {\n          posts = response.data;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return posts;\n  }\n}\n\nexport default PostService;\n"]},"metadata":{},"sourceType":"module"}