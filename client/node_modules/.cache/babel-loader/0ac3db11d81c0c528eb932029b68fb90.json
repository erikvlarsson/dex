{"ast":null,"code":"import Api from \"./Api\";\n\nclass UserService {\n  async signup(userData) {\n    let res = null;\n    await Api.post(\"/signup\", userData).then(response => {\n      if (response.status === 201) {\n        sessionStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        localStorage.email = userData.email;\n        res = 201;\n      }\n    }).catch(error => {\n      res = error;\n    });\n    return res;\n  }\n\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData).then(response => {\n      if (response.status === 200) {\n        res = 200;\n        sessionStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        localStorage.email = userData.email;\n      }\n    }).catch(error => {\n      res = error.response.status;\n    });\n    return res;\n  }\n\n  async getRefreshToken() {\n    let result = null;\n    await Api.post(\"/getRefreshToken\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.refreshToken\n      }\n    }).then(response => {\n      alert(response);\n\n      if (response.status === 201) {\n        result = 201; // sessionStorage.accessToken = response;\n\n        localStorage.refreshToken = response.refreshToken;\n      } else {\n        result = response.status;\n      }\n    }).catch(error => {\n      console.log(error);\n      result = 401;\n    });\n    return result;\n  }\n\n  async getAccessToken() {\n    let result = null;\n    await Api.post(\"/getAccessToken\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.refreshToken\n      }\n    }).then(response => {\n      if (response.status === 201) {\n        result = 201;\n        sessionStorage.accessToken = response.data.accessToken;\n      }\n    }).catch(error => {\n      // result = error.response.status;\n      console.log(error);\n    });\n    return result;\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Shared/UserService.js"],"names":["Api","UserService","signup","userData","res","post","then","response","status","sessionStorage","accessToken","data","localStorage","refreshToken","email","catch","error","login","getRefreshToken","result","headers","Authorization","alert","console","log","getAccessToken"],"mappings":"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","sourcesContent":["import Api from \"./Api\";\n\nclass UserService {\n  async signup(userData) {\n    let res = null;\n    await Api.post(\"/signup\", userData)\n      .then((response) => {\n        if (response.status === 201) {\n          sessionStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          localStorage.email = userData.email;\n          res = 201;\n        }\n      })\n      .catch((error) => {\n        res = error;\n      });\n    return res;\n  }\n\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData)\n      .then((response) => {\n        if (response.status === 200) {\n          res = 200;\n          sessionStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          localStorage.email = userData.email;\n        }\n      })\n      .catch((error) => {\n        res = error.response.status;\n      });\n    return res;\n  }\n\n  async getRefreshToken() {\n    let result = null;\n    await Api.post(\n      \"/getRefreshToken\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.refreshToken,\n        },\n      }\n    )\n      .then((response) => {\n        alert(response);\n\n        if (response.status === 201) {\n          result = 201;\n          // sessionStorage.accessToken = response;\n          localStorage.refreshToken = response.refreshToken;\n        } else {\n          result = response.status;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        result = 401;\n      });\n    return result;\n  }\n\n  async getAccessToken() {\n    let result = null;\n    await Api.post(\n      \"/getAccessToken\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.refreshToken,\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 201) {\n          result = 201;\n          sessionStorage.accessToken = response.data.accessToken;\n        }\n      })\n      .catch((error) => {\n        // result = error.response.status;\n        console.log(error);\n      });\n    return result;\n  }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}