{"ast":null,"code":"import ApiService from \"./ApiService\";\n\nclass PostService extends ApiService {\n  constructor(...args) {\n    super(...args);\n\n    this.getPosts = async () => {\n      let posts = null;\n      await this.Api.get(`/posts/${sessionStorage.user.id}`).then(response => {\n        if (response.status === 200) {\n          posts = response.data;\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      return posts;\n    };\n\n    this.createPost = async (feeling, factors) => {\n      let didCreate = null;\n      const post = {\n        userId: sessionStorage.user.id,\n        feeling: feeling,\n        factors: factors\n      };\n      await this.Api.post(\"/posts\", post).then(response => {\n        if (response.status === 201) {\n          didCreate = true;\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      return didCreate;\n    };\n\n    this.editPost = async (postId, userId, feeling, factors) => {\n      let didUpdate = null;\n      const updatedPost = {\n        id: postId,\n        userId: userId,\n        feeling: feeling,\n        factors: factors\n      };\n      await this.Api.put(`/posts/${postId}`, updatedPost).then(response => {\n        if (response.status === 200) {\n          didUpdate = true;\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      return didUpdate;\n    };\n\n    this.deletePost = async postId => {\n      let didDelete = null;\n      await this.Api.delete(`/posts/${postId}`).then(response => {\n        if (response.status === 200) {\n          didDelete = true;\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      return didDelete;\n    };\n  }\n\n}\n\nexport default PostService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/dex/client/src/Shared/PostService.js"],"names":["ApiService","PostService","getPosts","posts","Api","get","sessionStorage","user","id","then","response","status","data","catch","error","console","log","createPost","feeling","factors","didCreate","post","userId","editPost","postId","didUpdate","updatedPost","put","deletePost","didDelete","delete"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,WAAN,SAA0BD,UAA1B,CAAqC;AAAA;AAAA;;AAAA,SACnCE,QADmC,GACxB,YAAY;AACrB,UAAIC,KAAK,GAAG,IAAZ;AACA,YAAM,KAAKC,GAAL,CAASC,GAAT,CAAc,UAASC,cAAc,CAACC,IAAf,CAAoBC,EAAG,EAA9C,EACHC,IADG,CACGC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BR,UAAAA,KAAK,GAAGO,QAAQ,CAACE,IAAjB;AACD;AACF,OALG,EAMHC,KANG,CAMIC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARG,CAAN;AASA,aAAOX,KAAP;AACD,KAbkC;;AAAA,SAenCc,UAfmC,GAetB,OAAOC,OAAP,EAAgBC,OAAhB,KAA4B;AACvC,UAAIC,SAAS,GAAG,IAAhB;AACA,YAAMC,IAAI,GAAG;AACXC,QAAAA,MAAM,EAAEhB,cAAc,CAACC,IAAf,CAAoBC,EADjB;AAEXU,QAAAA,OAAO,EAAEA,OAFE;AAGXC,QAAAA,OAAO,EAAEA;AAHE,OAAb;AAKA,YAAM,KAAKf,GAAL,CAASiB,IAAT,CAAc,QAAd,EAAwBA,IAAxB,EACHZ,IADG,CACGC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BS,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF,OALG,EAMHP,KANG,CAMIC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARG,CAAN;AASA,aAAOM,SAAP;AACD,KAhCkC;;AAAA,SAkCnCG,QAlCmC,GAkCxB,OAAOC,MAAP,EAAeF,MAAf,EAAuBJ,OAAvB,EAAgCC,OAAhC,KAA4C;AACrD,UAAIM,SAAS,GAAG,IAAhB;AACA,YAAMC,WAAW,GAAG;AAClBlB,QAAAA,EAAE,EAAEgB,MADc;AAElBF,QAAAA,MAAM,EAAEA,MAFU;AAGlBJ,QAAAA,OAAO,EAAEA,OAHS;AAIlBC,QAAAA,OAAO,EAAEA;AAJS,OAApB;AAMA,YAAM,KAAKf,GAAL,CAASuB,GAAT,CAAc,UAASH,MAAO,EAA9B,EAAiCE,WAAjC,EACHjB,IADG,CACGC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3Bc,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF,OALG,EAMHZ,KANG,CAMIC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARG,CAAN;AASA,aAAOW,SAAP;AACD,KApDkC;;AAAA,SAsDnCG,UAtDmC,GAsDtB,MAAOJ,MAAP,IAAkB;AAC7B,UAAIK,SAAS,GAAG,IAAhB;AACA,YAAM,KAAKzB,GAAL,CAAS0B,MAAT,CAAiB,UAASN,MAAO,EAAjC,EACHf,IADG,CACGC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BkB,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF,OALG,EAMHhB,KANG,CAMIC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARG,CAAN;AASA,aAAOe,SAAP;AACD,KAlEkC;AAAA;;AAAA;;AAqErC,eAAe5B,WAAf","sourcesContent":["import ApiService from \"./ApiService\";\n\nclass PostService extends ApiService {\n  getPosts = async () => {\n    let posts = null;\n    await this.Api.get(`/posts/${sessionStorage.user.id}`)\n      .then((response) => {\n        if (response.status === 200) {\n          posts = response.data;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return posts;\n  };\n\n  createPost = async (feeling, factors) => {\n    let didCreate = null;\n    const post = {\n      userId: sessionStorage.user.id,\n      feeling: feeling,\n      factors: factors,\n    };\n    await this.Api.post(\"/posts\", post)\n      .then((response) => {\n        if (response.status === 201) {\n          didCreate = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return didCreate;\n  };\n\n  editPost = async (postId, userId, feeling, factors) => {\n    let didUpdate = null;\n    const updatedPost = {\n      id: postId,\n      userId: userId,\n      feeling: feeling,\n      factors: factors,\n    };\n    await this.Api.put(`/posts/${postId}`, updatedPost)\n      .then((response) => {\n        if (response.status === 200) {\n          didUpdate = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return didUpdate;\n  };\n\n  deletePost = async (postId) => {\n    let didDelete = null;\n    await this.Api.delete(`/posts/${postId}`)\n      .then((response) => {\n        if (response.status === 200) {\n          didDelete = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return didDelete;\n  };\n}\n\nexport default PostService;\n"]},"metadata":{},"sourceType":"module"}