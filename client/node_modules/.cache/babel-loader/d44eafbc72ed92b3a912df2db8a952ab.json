{"ast":null,"code":"import ApiService from \"./ApiService\";\n\nclass PostService extends ApiService {\n  constructor(...args) {\n    super(...args);\n\n    this.getPosts = async () => {\n      let posts = null;\n      await this.Api.get(`/posts/${sessionStorage.userId}`).then(response => {\n        if (response.status === 200) {\n          posts = response.data;\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      return posts;\n    };\n\n    this.createPost = async (type, content) => {\n      let didCreate = null;\n      const post = {\n        userId: sessionStorage.userId,\n        type: type,\n        content: content\n      };\n      await this.Api.post(\"/posts\", post).then(response => {\n        if (response.status === 201) {\n          didCreate = true;\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      return didCreate;\n    };\n\n    this.editPost = async (postId, userId, content) => {\n      let didUpdate = null;\n      const updatedPost = {\n        id: postId,\n        userId: userId,\n        content: content\n      };\n      await this.Api.put(`/posts/${postId}`, updatedPost).then(response => {\n        if (response.status === 200) {\n          didUpdate = true;\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      return didUpdate;\n    };\n\n    this.deletePost = async postId => {\n      let didDelete = null;\n      await this.Api.delete(`/posts/${postId}`).then(response => {\n        if (response.status === 200) {\n          didDelete = true;\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n      return didDelete;\n    };\n  }\n\n}\n\nexport default PostService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/dex/client/src/Shared/PostService.js"],"names":["ApiService","PostService","getPosts","posts","Api","get","sessionStorage","userId","then","response","status","data","catch","error","console","log","createPost","type","content","didCreate","post","editPost","postId","didUpdate","updatedPost","id","put","deletePost","didDelete","delete"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,WAAN,SAA0BD,UAA1B,CAAqC;AAAA;AAAA;;AAAA,SACnCE,QADmC,GACxB,YAAY;AACrB,UAAIC,KAAK,GAAG,IAAZ;AACA,YAAM,KAAKC,GAAL,CAASC,GAAT,CAAc,UAASC,cAAc,CAACC,MAAO,EAA7C,EACHC,IADG,CACGC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BP,UAAAA,KAAK,GAAGM,QAAQ,CAACE,IAAjB;AACD;AACF,OALG,EAMHC,KANG,CAMIC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARG,CAAN;AASA,aAAOV,KAAP;AACD,KAbkC;;AAAA,SAenCa,UAfmC,GAetB,OAAOC,IAAP,EAAaC,OAAb,KAAyB;AACpC,UAAIC,SAAS,GAAG,IAAhB;AACA,YAAMC,IAAI,GAAG;AACXb,QAAAA,MAAM,EAAED,cAAc,CAACC,MADZ;AAEXU,QAAAA,IAAI,EAAEA,IAFK;AAGXC,QAAAA,OAAO,EAAEA;AAHE,OAAb;AAKA,YAAM,KAAKd,GAAL,CAASgB,IAAT,CAAc,QAAd,EAAwBA,IAAxB,EACHZ,IADG,CACGC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BS,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF,OALG,EAMHP,KANG,CAMIC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARG,CAAN;AASA,aAAOM,SAAP;AACD,KAhCkC;;AAAA,SAkCnCE,QAlCmC,GAkCxB,OAAOC,MAAP,EAAef,MAAf,EAAuBW,OAAvB,KAAmC;AAC5C,UAAIK,SAAS,GAAG,IAAhB;AACA,YAAMC,WAAW,GAAG;AAClBC,QAAAA,EAAE,EAAEH,MADc;AAElBf,QAAAA,MAAM,EAAEA,MAFU;AAGlBW,QAAAA,OAAO,EAAEA;AAHS,OAApB;AAKA,YAAM,KAAKd,GAAL,CAASsB,GAAT,CAAc,UAASJ,MAAO,EAA9B,EAAiCE,WAAjC,EACHhB,IADG,CACGC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3Ba,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF,OALG,EAMHX,KANG,CAMIC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARG,CAAN;AASA,aAAOU,SAAP;AACD,KAnDkC;;AAAA,SAqDnCI,UArDmC,GAqDtB,MAAOL,MAAP,IAAkB;AAC7B,UAAIM,SAAS,GAAG,IAAhB;AACA,YAAM,KAAKxB,GAAL,CAASyB,MAAT,CAAiB,UAASP,MAAO,EAAjC,EACHd,IADG,CACGC,QAAD,IAAc;AAClB,YAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BkB,UAAAA,SAAS,GAAG,IAAZ;AACD;AACF,OALG,EAMHhB,KANG,CAMIC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OARG,CAAN;AASA,aAAOe,SAAP;AACD,KAjEkC;AAAA;;AAAA;;AAoErC,eAAe3B,WAAf","sourcesContent":["import ApiService from \"./ApiService\";\n\nclass PostService extends ApiService {\n  getPosts = async () => {\n    let posts = null;\n    await this.Api.get(`/posts/${sessionStorage.userId}`)\n      .then((response) => {\n        if (response.status === 200) {\n          posts = response.data;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return posts;\n  };\n\n  createPost = async (type, content) => {\n    let didCreate = null;\n    const post = {\n      userId: sessionStorage.userId,\n      type: type,\n      content: content,\n    };\n    await this.Api.post(\"/posts\", post)\n      .then((response) => {\n        if (response.status === 201) {\n          didCreate = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return didCreate;\n  };\n\n  editPost = async (postId, userId, content) => {\n    let didUpdate = null;\n    const updatedPost = {\n      id: postId,\n      userId: userId,\n      content: content,\n    };\n    await this.Api.put(`/posts/${postId}`, updatedPost)\n      .then((response) => {\n        if (response.status === 200) {\n          didUpdate = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return didUpdate;\n  };\n\n  deletePost = async (postId) => {\n    let didDelete = null;\n    await this.Api.delete(`/posts/${postId}`)\n      .then((response) => {\n        if (response.status === 200) {\n          didDelete = true;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return didDelete;\n  };\n}\n\nexport default PostService;\n"]},"metadata":{},"sourceType":"module"}