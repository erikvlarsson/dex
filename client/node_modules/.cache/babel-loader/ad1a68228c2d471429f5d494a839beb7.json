{"ast":null,"code":"import Api from \"./Api\";\n\nclass UserService {\n  // returns only response status code\n  async signup(userData) {\n    let res = null;\n    await Api.post(\"/signup\", userData).then(response => {\n      if (response.status === 201) {\n        localStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        localStorage.email = userData.email;\n        res = 201;\n      }\n    }).catch(error => {\n      res = error;\n    });\n    return res;\n  } // returns only response status code while saving tokens to localStorage\n\n\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData).then(response => {\n      if (response.status === 200) {\n        res = 200;\n        localStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n        localStorage.email = userData.email;\n      }\n    }).catch(error => {\n      res = error.response.status;\n    });\n    return res;\n  } // returns only response status code\n\n\n  async authorize() {\n    let res = null;\n    await Api.post(\"/authorize\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.accessToken //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      res = response;\n    }).catch(error => {\n      res = error.response;\n    });\n    return res;\n  } // returns the new accessToken or null\n\n\n  async getRefreshToken() {\n    let result = null;\n    await Api.post(\"/getRefreshToken\", {}, {\n      headers: {\n        refreshToken: \"Bearer \" + localStorage.refreshToken //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        result = 200;\n        localStorage.accessToken = response.data.accessToken;\n        localStorage.refreshToken = response.data.refreshToken;\n      }\n    }).catch(error => {\n      result = error.response.status;\n    });\n    return result;\n  } // returns the new accessToken or null\n\n\n  async getAccessToken() {\n    let accessToken = null;\n    await Api.post(\"/getAccessToken\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.refreshToken //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      if (response.status === 200) {\n        sessionStorage.accessToken = accessToken;\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return accessToken;\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Shared/UserService.js"],"names":["Api","UserService","signup","userData","res","post","then","response","status","localStorage","accessToken","data","refreshToken","email","catch","error","login","authorize","headers","Authorization","getRefreshToken","result","getAccessToken","sessionStorage","console","log"],"mappings":"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","sourcesContent":["import Api from \"./Api\";\n\nclass UserService {\n  // returns only response status code\n  async signup(userData) {\n    let res = null;\n    await Api.post(\"/signup\", userData)\n      .then((response) => {\n        if (response.status === 201) {\n          localStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          localStorage.email = userData.email;\n          res = 201;\n        }\n      })\n      .catch((error) => {\n        res = error;\n      });\n    return res;\n  }\n\n  // returns only response status code while saving tokens to localStorage\n  async login(userData) {\n    let res = null;\n    await Api.post(\"/login\", userData)\n      .then((response) => {\n        if (response.status === 200) {\n          res = 200;\n          localStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n          localStorage.email = userData.email;\n        }\n      })\n      .catch((error) => {\n        res = error.response.status;\n      });\n    return res;\n  }\n\n  // returns only response status code\n  async authorize() {\n    let res = null;\n    await Api.post(\n      \"/authorize\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.accessToken, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        res = response;\n      })\n      .catch((error) => {\n        res = error.response;\n      });\n    return res;\n  }\n\n  // returns the new accessToken or null\n  async getRefreshToken() {\n    let result = null;\n    await Api.post(\n      \"/getRefreshToken\",\n      {},\n      {\n        headers: {\n          refreshToken: \"Bearer \" + localStorage.refreshToken, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 200) {\n          result = 200;\n          localStorage.accessToken = response.data.accessToken;\n          localStorage.refreshToken = response.data.refreshToken;\n        }\n      })\n      .catch((error) => {\n        result = error.response.status;\n      });\n    return result;\n  }\n\n  // returns the new accessToken or null\n  async getAccessToken() {\n    let accessToken = null;\n    await Api.post(\n      \"/getAccessToken\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.refreshToken, //the token is a variable which holds the token\n        },\n      }\n    )\n      .then((response) => {\n        if (response.status === 200) {\n          sessionStorage.accessToken = accessToken;\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    return accessToken;\n  }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}