{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/erik/Desktop/Software/frontend/src/Contexts/AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext } from \"react\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n\n  const [authenticated, setAuthenticated] = useState(false);\n  useEffect(() => {\n    if (!hasLoaded) {\n      const userService = new UserService();\n      userService.getRefreshToken().then(auth => {\n        setAuth(auth).then(() => {\n          if (auth) {\n            setTimeout(() => setHasLoaded(true), 1500);\n          } else {\n            logout().then(() => {\n              setHasLoaded(true);\n            });\n          }\n        });\n      }).catch(() => {\n        logout().then(() => {\n          setHasLoaded(true);\n        });\n      });\n    }\n  }, [hasLoaded, setAuth, setHasLoaded]);\n\n  const setAuth = async bool => {\n    setAuthenticated(bool);\n  };\n\n  const logout = async () => {\n    setAuth(false).then(() => {\n      localStorage.removeItem(\"refreshToken\");\n      sessionStorage.removeItem(\"accessToken\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth: authenticated,\n      setAuth: setAuth,\n      logout: logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextProvider, \"+nyo0O1WmcKNkwQZH3xRKUoDvQ8=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Contexts/AuthContext.js"],"names":["React","useState","createContext","AuthContext","AuthContextProvider","children","authenticated","setAuthenticated","useEffect","hasLoaded","userService","UserService","getRefreshToken","then","auth","setAuth","setTimeout","setHasLoaded","logout","catch","bool","localStorage","removeItem","sessionStorage"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,aAA1B,QAA+C,OAA/C;AACA,OAAO,MAAMC,WAAW,gBAAGD,aAAa,CAAC,IAAD,CAAjC;AAEP,OAAO,MAAME,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACnD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,KAAD,CAAlD;AAEAO,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACC,SAAL,EAAgB;AACd,YAAMC,WAAW,GAAG,IAAIC,WAAJ,EAApB;AACAD,MAAAA,WAAW,CACRE,eADH,GAEGC,IAFH,CAESC,IAAD,IAAU;AACdC,QAAAA,OAAO,CAACD,IAAD,CAAP,CAAcD,IAAd,CAAmB,MAAM;AACvB,cAAIC,IAAJ,EAAU;AACRE,YAAAA,UAAU,CAAC,MAAMC,YAAY,CAAC,IAAD,CAAnB,EAA2B,IAA3B,CAAV;AACD,WAFD,MAEO;AACLC,YAAAA,MAAM,GAAGL,IAAT,CAAc,MAAM;AAClBI,cAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,aAFD;AAGD;AACF,SARD;AASD,OAZH,EAaGE,KAbH,CAaS,MAAM;AACXD,QAAAA,MAAM,GAAGL,IAAT,CAAc,MAAM;AAClBI,UAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,SAFD;AAGD,OAjBH;AAkBD;AACF,GAtBQ,EAsBN,CAACR,SAAD,EAAYM,OAAZ,EAAqBE,YAArB,CAtBM,CAAT;;AAwBA,QAAMF,OAAO,GAAG,MAAOK,IAAP,IAAgB;AAC9Bb,IAAAA,gBAAgB,CAACa,IAAD,CAAhB;AACD,GAFD;;AAIA,QAAMF,MAAM,GAAG,YAAY;AACzBH,IAAAA,OAAO,CAAC,KAAD,CAAP,CAAeF,IAAf,CAAoB,MAAM;AACxBQ,MAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACAC,MAAAA,cAAc,CAACD,UAAf,CAA0B,aAA1B;AACD,KAHD;AAID,GALD;;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLR,MAAAA,IAAI,EAAER,aADD;AAELS,MAAAA,OAAO,EAAEA,OAFJ;AAGLG,MAAAA,MAAM,EAAEA;AAHH,KADT;AAAA,cAOGb;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAjDM;;GAAMD,mB;;KAAAA,mB","sourcesContent":["import React, { useState, createContext } from \"react\";\nexport const AuthContext = createContext(null);\n\nexport const AuthContextProvider = ({ children }) => {\n  const [authenticated, setAuthenticated] = useState(false);\n\n  useEffect(() => {\n    if (!hasLoaded) {\n      const userService = new UserService();\n      userService\n        .getRefreshToken()\n        .then((auth) => {\n          setAuth(auth).then(() => {\n            if (auth) {\n              setTimeout(() => setHasLoaded(true), 1500);\n            } else {\n              logout().then(() => {\n                setHasLoaded(true);\n              });\n            }\n          });\n        })\n        .catch(() => {\n          logout().then(() => {\n            setHasLoaded(true);\n          });\n        });\n    }\n  }, [hasLoaded, setAuth, setHasLoaded]);\n\n  const setAuth = async (bool) => {\n    setAuthenticated(bool);\n  };\n\n  const logout = async () => {\n    setAuth(false).then(() => {\n      localStorage.removeItem(\"refreshToken\");\n      sessionStorage.removeItem(\"accessToken\");\n    });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        auth: authenticated,\n        setAuth: setAuth,\n        logout: logout,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}