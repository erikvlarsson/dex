{"ast":null,"code":"import Api from \"./Api\";\n\nclass UserService {\n  async register(userData) {\n    let registered = false;\n    await Api.post(\"/register\", userData).then(response => {\n      if (response.status === 201) {\n        registered = true;\n      }\n    });\n    return registered;\n  }\n\n  async authorize() {\n    let authorized = null;\n    await Api.post(\"/authorize\", {}, {\n      headers: {\n        Authorization: \"Bearer \" + localStorage.access_token //the token is a variable which holds the token\n\n      }\n    }).then(response => {\n      authorized = response.status;\n    });\n    return authorized;\n  }\n\n  async login(userData) {\n    let authorized = null;\n    await Api.post(\"/login\", userData).then(response => {\n      authorized = response.status;\n      alert(\"login \" + response.status);\n\n      if (response.status === 200) {\n        localStorage.access_token = response.data.access_token;\n        localStorage.email = userData.email;\n      }\n    }).catch(error => {\n      authorized = error.response.status;\n    });\n    return authorized;\n  }\n\n  async getUsers() {\n    let res = null;\n    await Api.get(\"/users\").then(response => {\n      res = response;\n    });\n    return res;\n  }\n\n}\n\nexport default UserService;","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/Shared/UserService.js"],"names":["Api","UserService","register","userData","registered","post","then","response","status","authorize","authorized","headers","Authorization","localStorage","access_token","login","alert","data","email","catch","error","getUsers","res","get"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;;AAEA,MAAMC,WAAN,CAAkB;AAChB,QAAMC,QAAN,CAAeC,QAAf,EAAyB;AACvB,QAAIC,UAAU,GAAG,KAAjB;AACA,UAAMJ,GAAG,CAACK,IAAJ,CAAS,WAAT,EAAsBF,QAAtB,EAAgCG,IAAhC,CAAsCC,QAAD,IAAc;AACvD,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BJ,QAAAA,UAAU,GAAG,IAAb;AACD;AACF,KAJK,CAAN;AAKA,WAAOA,UAAP;AACD;;AAED,QAAMK,SAAN,GAAkB;AAChB,QAAIC,UAAU,GAAG,IAAjB;AACA,UAAMV,GAAG,CAACK,IAAJ,CACJ,YADI,EAEJ,EAFI,EAGJ;AACEM,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYC,YAAY,CAACC,YADjC,CAC+C;;AAD/C;AADX,KAHI,EAQJR,IARI,CAQEC,QAAD,IAAc;AACnBG,MAAAA,UAAU,GAAGH,QAAQ,CAACC,MAAtB;AACD,KAVK,CAAN;AAWA,WAAOE,UAAP;AACD;;AAED,QAAMK,KAAN,CAAYZ,QAAZ,EAAsB;AACpB,QAAIO,UAAU,GAAG,IAAjB;AACA,UAAMV,GAAG,CAACK,IAAJ,CAAS,QAAT,EAAmBF,QAAnB,EACHG,IADG,CACGC,QAAD,IAAc;AAClBG,MAAAA,UAAU,GAAGH,QAAQ,CAACC,MAAtB;AACAQ,MAAAA,KAAK,CAAC,WAAWT,QAAQ,CAACC,MAArB,CAAL;;AACA,UAAID,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BK,QAAAA,YAAY,CAACC,YAAb,GAA4BP,QAAQ,CAACU,IAAT,CAAcH,YAA1C;AACAD,QAAAA,YAAY,CAACK,KAAb,GAAqBf,QAAQ,CAACe,KAA9B;AACD;AACF,KARG,EASHC,KATG,CASIC,KAAD,IAAW;AAChBV,MAAAA,UAAU,GAAGU,KAAK,CAACb,QAAN,CAAeC,MAA5B;AACD,KAXG,CAAN;AAYA,WAAOE,UAAP;AACD;;AAED,QAAMW,QAAN,GAAiB;AACf,QAAIC,GAAG,GAAG,IAAV;AACA,UAAMtB,GAAG,CAACuB,GAAJ,CAAQ,QAAR,EAAkBjB,IAAlB,CAAwBC,QAAD,IAAc;AACzCe,MAAAA,GAAG,GAAGf,QAAN;AACD,KAFK,CAAN;AAGA,WAAOe,GAAP;AACD;;AAlDe;;AAqDlB,eAAerB,WAAf","sourcesContent":["import Api from \"./Api\";\n\nclass UserService {\n  async register(userData) {\n    let registered = false;\n    await Api.post(\"/register\", userData).then((response) => {\n      if (response.status === 201) {\n        registered = true;\n      }\n    });\n    return registered;\n  }\n\n  async authorize() {\n    let authorized = null;\n    await Api.post(\n      \"/authorize\",\n      {},\n      {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.access_token, //the token is a variable which holds the token\n        },\n      }\n    ).then((response) => {\n      authorized = response.status;\n    });\n    return authorized;\n  }\n\n  async login(userData) {\n    let authorized = null;\n    await Api.post(\"/login\", userData)\n      .then((response) => {\n        authorized = response.status;\n        alert(\"login \" + response.status);\n        if (response.status === 200) {\n          localStorage.access_token = response.data.access_token;\n          localStorage.email = userData.email;\n        }\n      })\n      .catch((error) => {\n        authorized = error.response.status;\n      });\n    return authorized;\n  }\n\n  async getUsers() {\n    let res = null;\n    await Api.get(\"/users\").then((response) => {\n      res = response;\n    });\n    return res;\n  }\n}\n\nexport default UserService;\n"]},"metadata":{},"sourceType":"module"}