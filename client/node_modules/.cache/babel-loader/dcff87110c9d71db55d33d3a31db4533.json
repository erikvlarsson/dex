{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/erik/Desktop/Software/frontend/src/AppMain.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from \"react\";\nimport UserService from \"./Shared/UserService\";\nimport Routes from \"./Routes\";\nimport LoadingScreen from \"./Components/Loading/LoadingScreen\";\nimport { AuthContext } from \"./Contexts/AuthContext\";\n\nfunction AppMain() {\n  _s();\n\n  const {\n    hasLoaded,\n    auth\n  } = useContext(AuthContext); // useEffect(() => {\n  //   if (!hasLoaded) {\n  //     const userService = new UserService();\n  //     userService\n  //       .getRefreshToken()\n  //       .then((auth) => {\n  //         setAuth(auth).then(() => {\n  //           if (auth) {\n  //             setTimeout(() => setHasLoaded(true), 1500);\n  //           } else {\n  //             logout().then(() => {\n  //               setHasLoaded(true);\n  //             });\n  //           }\n  //         });\n  //       })\n  //       .catch(() => {\n  //         logout().then(() => {\n  //           setHasLoaded(true);\n  //         });\n  //       });\n  //   }\n  // }, [hasLoaded, setAuth, setHasLoaded]);\n\n  if (!hasLoaded) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Routes, {\n        auth: auth,\n        hasLoaded: hasLoaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"alert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(AppMain, \"RKsWDWNGxCt2wD33cF7DkQPQZ+Q=\");\n\n_c = AppMain;\nexport default AppMain;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppMain\");","map":{"version":3,"sources":["/Users/erik/Desktop/Software/frontend/src/AppMain.js"],"names":["useEffect","useState","useContext","UserService","Routes","LoadingScreen","AuthContext","AppMain","hasLoaded","auth"],"mappings":";;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,oCAA1B;AACA,SAASC,WAAT,QAA4B,wBAA5B;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACjB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAsBP,UAAU,CAACI,WAAD,CAAtC,CADiB,CAGjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAI,CAACE,SAAL,EAAgB;AACd,wBAAO,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAEC,IAAd;AAAoB,QAAA,SAAS,EAAED;AAA/B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;AACF;;GArCQD,O;;KAAAA,O;AAuCT,eAAeA,OAAf","sourcesContent":["import { useEffect, useState, useContext } from \"react\";\nimport UserService from \"./Shared/UserService\";\nimport Routes from \"./Routes\";\nimport LoadingScreen from \"./Components/Loading/LoadingScreen\";\nimport { AuthContext } from \"./Contexts/AuthContext\";\n\nfunction AppMain() {\n  const { hasLoaded, auth } = useContext(AuthContext);\n\n  // useEffect(() => {\n  //   if (!hasLoaded) {\n  //     const userService = new UserService();\n  //     userService\n  //       .getRefreshToken()\n  //       .then((auth) => {\n  //         setAuth(auth).then(() => {\n  //           if (auth) {\n  //             setTimeout(() => setHasLoaded(true), 1500);\n  //           } else {\n  //             logout().then(() => {\n  //               setHasLoaded(true);\n  //             });\n  //           }\n  //         });\n  //       })\n  //       .catch(() => {\n  //         logout().then(() => {\n  //           setHasLoaded(true);\n  //         });\n  //       });\n  //   }\n  // }, [hasLoaded, setAuth, setHasLoaded]);\n\n  if (!hasLoaded) {\n    return <LoadingScreen />;\n  } else {\n    return (\n      <div className=\"App\">\n        <Routes auth={auth} hasLoaded={hasLoaded} />\n        <div id=\"alert\" />\n      </div>\n    );\n  }\n}\n\nexport default AppMain;\n"]},"metadata":{},"sourceType":"module"}